function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

/* eslint-disable */
// sequence-metadata v0.4.0 5d87d77b951c5d197544d97d75241bf3d02679d9
// --
// Code generated by webrpc-gen@v0.10.x-dev with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=metadata.ridl -target=typescript -client -out=./clients/metadata.gen.ts

// WebRPC description and code-gen version
const WebRPCVersion = "v1";

// Schema version of your RIDL schema
const WebRPCSchemaVersion = "v0.4.0";

// Schema hash generated from your RIDL schema
const WebRPCSchemaHash = "5d87d77b951c5d197544d97d75241bf3d02679d9";

//
// Types
//

let ContractType;
(function (ContractType) {
  ContractType["UNKNOWN"] = "UNKNOWN";
  ContractType["ERC20"] = "ERC20";
  ContractType["ERC721"] = "ERC721";
  ContractType["ERC1155"] = "ERC1155";
})(ContractType || (ContractType = {}));
let PropertyType;
(function (PropertyType) {
  PropertyType["INT"] = "INT";
  PropertyType["STRING"] = "STRING";
  PropertyType["ARRAY"] = "ARRAY";
  PropertyType["GENERIC"] = "GENERIC";
})(PropertyType || (PropertyType = {}));
let SwapType;
(function (SwapType) {
  SwapType["UNKNOWN"] = "UNKNOWN";
  SwapType["BUY"] = "BUY";
  SwapType["SELL"] = "SELL";
})(SwapType || (SwapType = {}));
let SortOrder;
(function (SortOrder) {
  SortOrder["DESC"] = "DESC";
  SortOrder["ASC"] = "ASC";
})(SortOrder || (SortOrder = {}));
//
// Client
//
class Metadata {
  constructor(hostname, fetch) {
    this.hostname = void 0;
    this.fetch = void 0;
    this.path = '/rpc/Metadata/';
    this.ping = headers => {
      return this.fetch(this.url('Ping'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.version = headers => {
      return this.fetch(this.url('Version'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            version: _data.version
          };
        });
      });
    };
    this.runtimeStatus = headers => {
      return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.getTokenMetadata = (args, headers) => {
      return this.fetch(this.url('GetTokenMetadata'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenMetadata: _data.tokenMetadata
          };
        });
      });
    };
    this.refreshTokenMetadata = (args, headers) => {
      return this.fetch(this.url('RefreshTokenMetadata'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.getTokenMetadataBatch = (args, headers) => {
      return this.fetch(this.url('GetTokenMetadataBatch'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractTokenMetadata: _data.contractTokenMetadata
          };
        });
      });
    };
    this.searchTokenMetadata = (args, headers) => {
      return this.fetch(this.url('SearchTokenMetadata'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            tokenMetadata: _data.tokenMetadata
          };
        });
      });
    };
    this.searchTokenIDs = (args, headers) => {
      return this.fetch(this.url('SearchTokenIDs'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            tokenIds: _data.tokenIds
          };
        });
      });
    };
    this.tokenCollectionFilters = (args, headers) => {
      return this.fetch(this.url('TokenCollectionFilters'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            filters: _data.filters
          };
        });
      });
    };
    this.getContractInfo = (args, headers) => {
      return this.fetch(this.url('GetContractInfo'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfo: _data.contractInfo
          };
        });
      });
    };
    this.getContractInfoBatch = (args, headers) => {
      return this.fetch(this.url('GetContractInfoBatch'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoMap: _data.contractInfoMap
          };
        });
      });
    };
    this.searchContractInfo = (args, headers) => {
      return this.fetch(this.url('SearchContractInfo'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoList: _data.contractInfoList
          };
        });
      });
    };
    this.searchContractInfoBatch = (args, headers) => {
      return this.fetch(this.url('SearchContractInfoBatch'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoByChain: _data.contractInfoByChain
          };
        });
      });
    };
    this.searchMetadata = (args, headers) => {
      return this.fetch(this.url('SearchMetadata'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenMetadata: _data.tokenMetadata,
            contractInfo: _data.contractInfo
          };
        });
      });
    };
    this.getNiftyswapTokenQuantity = (args, headers) => {
      return this.fetch(this.url('GetNiftyswapTokenQuantity'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            quantity: _data.quantity
          };
        });
      });
    };
    this.getNiftyswapUnitPrices = (args, headers) => {
      return this.fetch(this.url('GetNiftyswapUnitPrices'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            prices: _data.prices
          };
        });
      });
    };
    this.getNiftyswapUnitPricesWithQuantities = (args, headers) => {
      return this.fetch(this.url('GetNiftyswapUnitPricesWithQuantities'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            prices: _data.prices
          };
        });
      });
    };
    this.hostname = hostname;
    this.fetch = (input, init) => fetch(input, init);
  }
  url(name) {
    return this.hostname + this.path + name;
  }
}
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: _extends({}, headers, {
      'Content-Type': 'application/json'
    }),
    body: JSON.stringify(body || {})
  };
};
const buildResponse = res => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (err) {
      throw {
        code: 'unknown',
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      };
    }
    if (!res.ok) {
      throw data; // webrpc error response
    }

    return data;
  });
};

const fetch = typeof global === 'object' ? global.fetch : window.fetch;
class SequenceMetadataClient extends Metadata {
  constructor(hostname = 'https://metadata.sequence.app') {
    super(hostname.endsWith('/') ? hostname.slice(0, -1) : hostname, fetch);
  }
}

export { ContractType, Metadata, PropertyType, SequenceMetadataClient, SortOrder, SwapType, WebRPCSchemaHash, WebRPCSchemaVersion, WebRPCVersion };
