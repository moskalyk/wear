import { providers } from 'ethers';
import { JsonRpcRequest, JsonRpcResponseCallback, JsonRpcHandler, JsonRpcFetchFunc, JsonRpcRequestFunc } from './types';
type ExternalProvider = providers.ExternalProvider;
export declare class JsonRpcSender implements JsonRpcHandler {
    readonly send: JsonRpcFetchFunc;
    readonly request: JsonRpcRequestFunc;
    readonly defaultChainId?: number;
    constructor(provider: providers.JsonRpcProvider | JsonRpcHandler | JsonRpcFetchFunc, defaultChainId?: number);
    sendAsync: (request: JsonRpcRequest, callback: JsonRpcResponseCallback | ((error: any, response: any) => void), chainId?: number) => void;
}
export declare class JsonRpcExternalProvider implements ExternalProvider, JsonRpcHandler {
    private provider;
    constructor(provider: providers.JsonRpcProvider);
    sendAsync: (request: JsonRpcRequest, callback: JsonRpcResponseCallback | ((error: any, response: any) => void)) => void;
    send: (request: JsonRpcRequest, callback: JsonRpcResponseCallback | ((error: any, response: any) => void)) => void;
}
export {};
