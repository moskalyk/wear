function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

/* eslint-disable */
// sequence-api v0.4.0 e4aaaf3a3c07a1f339226fcac3b8addcb3120c7b
// --
// Code generated by webrpc-gen@v0.10.x-dev with typescript@v0.10.0 generator. DO NOT EDIT.
//
// webrpc-gen -schema=api.ridl -target=typescript@v0.10.0 -client -out=./clients/api.gen.ts

// WebRPC description and code-gen version
const WebRPCVersion = "v1";

// Schema version of your RIDL schema
const WebRPCSchemaVersion = "v0.4.0";

// Schema hash generated from your RIDL schema
const WebRPCSchemaHash = "e4aaaf3a3c07a1f339226fcac3b8addcb3120c7b";

//
// Types
//

let SmartRampOrderStatus;
(function (SmartRampOrderStatus) {
  SmartRampOrderStatus["UNKNOWN"] = "UNKNOWN";
  SmartRampOrderStatus["RUNNING_CHECKS"] = "RUNNING_CHECKS";
  SmartRampOrderStatus["PROCESSING"] = "PROCESSING";
  SmartRampOrderStatus["FAILED"] = "FAILED";
  SmartRampOrderStatus["COMPLETE"] = "COMPLETE";
})(SmartRampOrderStatus || (SmartRampOrderStatus = {}));
let SmartRampTxnStatus;
(function (SmartRampTxnStatus) {
  SmartRampTxnStatus["UNKNOWN"] = "UNKNOWN";
  SmartRampTxnStatus["SUCCESSFUL"] = "SUCCESSFUL";
  SmartRampTxnStatus["FAILED"] = "FAILED";
})(SmartRampTxnStatus || (SmartRampTxnStatus = {}));
let SortOrder;
(function (SortOrder) {
  SortOrder["DESC"] = "DESC";
  SortOrder["ASC"] = "ASC";
})(SortOrder || (SortOrder = {}));
//
// Client
//
class API {
  constructor(hostname, fetch) {
    this.hostname = void 0;
    this.fetch = void 0;
    this.path = '/rpc/API/';
    this.ping = headers => {
      return this.fetch(this.url('Ping'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.version = headers => {
      return this.fetch(this.url('Version'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            version: _data.version
          };
        });
      });
    };
    this.runtimeStatus = headers => {
      return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.getSequenceContext = headers => {
      return this.fetch(this.url('GetSequenceContext'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            data: _data.data
          };
        });
      });
    };
    this.getAuthToken = (args, headers) => {
      return this.fetch(this.url('GetAuthToken'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            jwtToken: _data.jwtToken,
            address: _data.address,
            user: _data.user
          };
        });
      });
    };
    this.sendPasswordlessLink = (args, headers) => {
      return this.fetch(this.url('SendPasswordlessLink'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.friendList = (args, headers) => {
      return this.fetch(this.url('FriendList'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            friends: _data.friends
          };
        });
      });
    };
    this.getFriendByAddress = (args, headers) => {
      return this.fetch(this.url('GetFriendByAddress'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            friend: _data.friend
          };
        });
      });
    };
    this.searchFriends = (args, headers) => {
      return this.fetch(this.url('SearchFriends'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            friends: _data.friends
          };
        });
      });
    };
    this.addFriend = (args, headers) => {
      return this.fetch(this.url('AddFriend'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            friend: _data.friend
          };
        });
      });
    };
    this.updateFriendNickname = (args, headers) => {
      return this.fetch(this.url('UpdateFriendNickname'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            friend: _data.friend
          };
        });
      });
    };
    this.removeFriend = (args, headers) => {
      return this.fetch(this.url('RemoveFriend'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.contractCall = (args, headers) => {
      return this.fetch(this.url('ContractCall'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            returns: _data.returns
          };
        });
      });
    };
    this.decodeContractCall = (args, headers) => {
      return this.fetch(this.url('DecodeContractCall'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            call: _data.call
          };
        });
      });
    };
    this.lookupContractCallSelectors = (args, headers) => {
      return this.fetch(this.url('LookupContractCallSelectors'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            signatures: _data.signatures
          };
        });
      });
    };
    this.userStorageFetch = (args, headers) => {
      return this.fetch(this.url('UserStorageFetch'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            object: _data.object
          };
        });
      });
    };
    this.userStorageSave = (args, headers) => {
      return this.fetch(this.url('UserStorageSave'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      });
    };
    this.userStorageDelete = (args, headers) => {
      return this.fetch(this.url('UserStorageDelete'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      });
    };
    this.userStorageFetchAll = (args, headers) => {
      return this.fetch(this.url('UserStorageFetchAll'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            objects: _data.objects
          };
        });
      });
    };
    this.getMoonpayLink = (args, headers) => {
      return this.fetch(this.url('GetMoonpayLink'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            signedUrl: _data.signedUrl
          };
        });
      });
    };
    this.getSardineClientToken = headers => {
      return this.fetch(this.url('GetSardineClientToken'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            token: _data.token
          };
        });
      });
    };
    this.isUsingGoogleMail = (args, headers) => {
      return this.fetch(this.url('IsUsingGoogleMail'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            yes: _data.yes
          };
        });
      });
    };
    this.resolveENSAddress = (args, headers) => {
      return this.fetch(this.url('ResolveENSAddress'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            address: _data.address,
            ok: _data.ok
          };
        });
      });
    };
    this.isValidSignature = (args, headers) => {
      return this.fetch(this.url('IsValidSignature'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            isValid: _data.isValid
          };
        });
      });
    };
    this.isValidMessageSignature = (args, headers) => {
      return this.fetch(this.url('IsValidMessageSignature'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            isValid: _data.isValid
          };
        });
      });
    };
    this.isValidTypedDataSignature = (args, headers) => {
      return this.fetch(this.url('IsValidTypedDataSignature'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            isValid: _data.isValid
          };
        });
      });
    };
    this.isValidETHAuthProof = (args, headers) => {
      return this.fetch(this.url('IsValidETHAuthProof'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            isValid: _data.isValid
          };
        });
      });
    };
    this.getCoinPrices = (args, headers) => {
      return this.fetch(this.url('GetCoinPrices'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenPrices: _data.tokenPrices
          };
        });
      });
    };
    this.getCollectiblePrices = (args, headers) => {
      return this.fetch(this.url('GetCollectiblePrices'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenPrices: _data.tokenPrices
          };
        });
      });
    };
    this.getExchangeRate = (args, headers) => {
      return this.fetch(this.url('GetExchangeRate'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            exchangeRate: _data.exchangeRate
          };
        });
      });
    };
    this.memoryStore = (args, headers) => {
      return this.fetch(this.url('MemoryStore'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      });
    };
    this.memoryLoad = (args, headers) => {
      return this.fetch(this.url('MemoryLoad'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            value: _data.value
          };
        });
      });
    };
    this.listPayCardsOnFile = headers => {
      return this.fetch(this.url('ListPayCardsOnFile'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            payCards: _data.payCards
          };
        });
      });
    };
    this.savePayCard = (args, headers) => {
      return this.fetch(this.url('SavePayCard'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok,
            payCard: _data.payCard
          };
        });
      });
    };
    this.updatePayCardCVC = (args, headers) => {
      return this.fetch(this.url('UpdatePayCardCVC'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      });
    };
    this.deletePayCard = (args, headers) => {
      return this.fetch(this.url('DeletePayCard'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            ok: _data.ok
          };
        });
      });
    };
    this.smartRampQuote = (args, headers) => {
      return this.fetch(this.url('SmartRampQuote'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status,
            quoteDetails: _data.quoteDetails
          };
        });
      });
    };
    this.smartRampPurchase = (args, headers) => {
      return this.fetch(this.url('SmartRampPurchase'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            processing: _data.processing,
            receipt: _data.receipt
          };
        });
      });
    };
    this.smartRampWaitOrderConfirmation = (args, headers) => {
      return this.fetch(this.url('SmartRampWaitOrderConfirmation'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            done: _data.done,
            receipt: _data.receipt
          };
        });
      });
    };
    this.smartRampGetOrder = (args, headers) => {
      return this.fetch(this.url('SmartRampGetOrder'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            order: _data.order
          };
        });
      });
    };
    this.smartRampCheckCardAuthorization = (args, headers) => {
      return this.fetch(this.url('SmartRampCheckCardAuthorization'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            cardAuth: _data.cardAuth
          };
        });
      });
    };
    this.smartRampOrdersList = (args, headers) => {
      return this.fetch(this.url('SmartRampOrdersList'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            orders: _data.orders
          };
        });
      });
    };
    this.smartRampGetOrderTxnHash = (args, headers) => {
      return this.fetch(this.url('SmartRampGetOrderTxnHash'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            txnHash: _data.txnHash,
            txnSuccessful: _data.txnSuccessful
          };
        });
      });
    };
    this.smartRampSubmitCardAuthorization = (args, headers) => {
      return this.fetch(this.url('SmartRampSubmitCardAuthorization'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.adminSmartRampGetOrder = (args, headers) => {
      return this.fetch(this.url('AdminSmartRampGetOrder'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            order: _data.order
          };
        });
      });
    };
    this.adminSmartRampListCompletedOrders = (args, headers) => {
      return this.fetch(this.url('AdminSmartRampListCompletedOrders'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            orders: _data.orders
          };
        });
      });
    };
    this.adminSmartRampListPendingOrders = (args, headers) => {
      return this.fetch(this.url('AdminSmartRampListPendingOrders'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            pendingOrders: _data.pendingOrders
          };
        });
      });
    };
    this.getInviteInfo = headers => {
      return this.fetch(this.url('GetInviteInfo'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            inviteInfo: _data.inviteInfo
          };
        });
      });
    };
    this.isValidAccessCode = (args, headers) => {
      return this.fetch(this.url('IsValidAccessCode'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.internalClaimAccessCode = (args, headers) => {
      return this.fetch(this.url('InternalClaimAccessCode'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.walletRecover = (args, headers) => {
      return this.fetch(this.url('WalletRecover'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            encryptedWallet: _data.encryptedWallet
          };
        });
      });
    };
    this.blockNumberAtTime = (args, headers) => {
      return this.fetch(this.url('BlockNumberAtTime'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            blocks: _data.blocks
          };
        });
      });
    };
    this.paperSessionSecret = (args, headers) => {
      return this.fetch(this.url('PaperSessionSecret'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            secret: _data.secret
          };
        });
      });
    };
    this.paperSessionSecret2 = (args, headers) => {
      return this.fetch(this.url('PaperSessionSecret2'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            secret: _data.secret
          };
        });
      });
    };
    this.hostname = hostname;
    this.fetch = (input, init) => fetch(input, init);
  }
  url(name) {
    return this.hostname + this.path + name;
  }
}
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: _extends({}, headers, {
      'Content-Type': 'application/json'
    }),
    body: JSON.stringify(body || {})
  };
};
const buildResponse = res => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (err) {
      throw {
        code: 'unknown',
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      };
    }
    if (!res.ok) {
      throw data; // webrpc error response
    }

    return data;
  });
};

const fetch = typeof global === 'object' ? global.fetch : window.fetch;
class SequenceAPIClient extends API {
  constructor(hostname, jwtAuth) {
    super(hostname.endsWith('/') ? hostname.slice(0, -1) : hostname, fetch);
    this.jwtAuth = jwtAuth;
    this._fetch = (input, init) => {
      // automatically include jwt auth header to requests
      // if its been set on the api client
      const headers = {};
      if (this.jwtAuth && this.jwtAuth.length > 0) {
        headers['Authorization'] = `BEARER ${this.jwtAuth}`;
      }

      // before the request is made
      init.headers = _extends({}, init.headers, headers);
      return fetch(input, init);
    };
    this.fetch = this._fetch;
  }
}

export { API, SequenceAPIClient, SmartRampOrderStatus, SmartRampTxnStatus, SortOrder, WebRPCSchemaHash, WebRPCSchemaVersion, WebRPCVersion };
