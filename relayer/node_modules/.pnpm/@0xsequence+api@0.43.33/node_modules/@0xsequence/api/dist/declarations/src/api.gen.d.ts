export declare const WebRPCVersion = "v1";
export declare const WebRPCSchemaVersion = "v0.4.0";
export declare const WebRPCSchemaHash = "e4aaaf3a3c07a1f339226fcac3b8addcb3120c7b";
export declare enum SmartRampOrderStatus {
    UNKNOWN = "UNKNOWN",
    RUNNING_CHECKS = "RUNNING_CHECKS",
    PROCESSING = "PROCESSING",
    FAILED = "FAILED",
    COMPLETE = "COMPLETE"
}
export declare enum SmartRampTxnStatus {
    UNKNOWN = "UNKNOWN",
    SUCCESSFUL = "SUCCESSFUL",
    FAILED = "FAILED"
}
export declare enum SortOrder {
    DESC = "DESC",
    ASC = "ASC"
}
export interface Version {
    webrpcVersion: string;
    schemaVersion: string;
    schemaHash: string;
    appVersion: string;
}
export interface RuntimeStatus {
    healthOK: boolean;
    startTime: string;
    uptime: number;
    ver: string;
    branch: string;
    commitHash: string;
    checks: RuntimeChecks;
}
export interface RuntimeChecks {
}
export interface SequenceContext {
    factory: string;
    mainModule: string;
    mainModuleUpgradable: string;
    guestModule: string;
    utils: string;
}
export interface User {
    address: string;
    username: string;
    avatar: string;
    bio: string;
    location: string;
    locale: string;
    backup?: boolean;
    backupConfirmed?: boolean;
    maxInvites?: number;
    updatedAt?: string;
    createdAt?: string;
}
export interface WalletBackup {
    accountAddress: string;
    secretHash: string;
    encryptedWallet: string;
    userConfirmed: boolean;
    updatedAt?: string;
    createdAt?: string;
}
export interface Friend {
    id: number;
    userAddress: string;
    friendAddress: string;
    nickname: string;
    user?: User;
    createdAt?: string;
}
export interface InviteCode {
    usesLeft: number;
    ownerAccount: string;
    email?: string;
    url: string;
    createdAt?: string;
    expiresAt?: string;
}
export interface InviteCodeAccount {
    claimedByUserAddress: string;
    claimedAt?: string;
}
export interface InviteInfo {
    expiryInHours: number;
    max: number;
    invites: Array<InviteCode>;
}
export interface ContractCall {
    signature: string;
    function: string;
    args: Array<TupleComponent>;
}
export interface TupleComponent {
    name?: string;
    type: string;
    value: any;
}
export interface Transaction {
    delegateCall: boolean;
    revertOnError: boolean;
    gasLimit: string;
    target: string;
    value: string;
    data: string;
    call?: ContractCall;
}
export interface UserStorage {
    userAddress: string;
    key: string;
    value: any;
}
export interface Token {
    chainId: number;
    contractAddress: string;
    tokenId?: string;
}
export interface Price {
    value: number;
    currency: string;
}
export interface TokenPrice {
    token: Token;
    price?: Price;
    price24hChange?: Price;
    floorPrice: Price;
    buyPrice: Price;
    sellPrice: Price;
    updatedAt: string;
}
export interface ExchangeRate {
    name: string;
    symbol: string;
    value: number;
    vsCurrency: string;
    currencyType: string;
}
export interface PayCard {
    id: number;
    userAddress: string;
    cardType: string;
    cardFirstNameToken: string;
    cardLastNameToken: string;
    cardNumberLastFourDigits: string;
    cardNumberToken: string;
    cardCVCToken: string;
    cardExpMonth: number;
    cardExpYear: number;
    contactAddressToken: string;
    contactCityToken: string;
    contactProvinceToken: string;
    contactPostalCodeToken: string;
    contactCountryCodeToken: string;
    contactEmailToken: string;
    contactPhoneToken: string;
    updatedAt?: string;
    createdAt?: string;
}
export interface SmartRampQuoteRequest {
    countryCode: string;
    niftyswapContractAddress: string;
    tokenIds: Array<string>;
    tokensBoughtAmounts: Array<string>;
    maxCurrency: string;
    extraFeeRecipients?: Array<string>;
    extraFeeAmounts?: Array<string>;
}
export interface SmartRampQuoteDetails {
    quoteId: string;
    smartScriptId: string;
    quoteRequest: SmartRampQuoteRequest;
    recipientAddress: string;
    purchaseAmount: number;
    purchaseFees: number;
    purchaseTotal: number;
    sourceCurrency: string;
    destCurrency: string;
    countryIsSupported: boolean;
    createdAt: string;
    expiresAt: string;
}
export interface SmartRampPurchaseReceipt {
    orderId: string;
    quoteId: string;
    createdAt: string;
    status: SmartRampOrderStatus;
    errorReason?: string;
    errorCode?: string;
    authCodesRequested: boolean;
    countryCode: string;
    sourceCurrency: string;
    purchaseAmount: number;
    purchaseFees: number;
    purchaseTotal: number;
    txnHash: string;
    txnSuccessful: SmartRampTxnStatus;
}
export interface SmartRampOrder {
    id: number;
    userAddress: string;
    contractAddress: string;
    payCardId: number;
    orderId: string;
    quoteId: string;
    status: SmartRampOrderStatus;
    errorReason: string;
    errorCode: string;
    authCodesRequested: boolean;
    countryCode: string;
    email: string;
    sourceCurrency: string;
    destCurrency: string;
    purchaseAmount: number;
    purchaseFees: number;
    purchaseTotal: number;
    smartScriptParams: {
        [key: string]: any;
    };
    txnHash: string;
    txnSuccessful: SmartRampTxnStatus;
    updatedAt?: string;
    createdAt?: string;
}
export interface PayCardAuth {
    orderId: string;
    smsNeeded: boolean;
    card2faNeeded: boolean;
    authorization3dsUrl: string;
}
export interface Page {
    pageSize?: number;
    page?: number;
    totalRecords?: number;
    column?: string;
    before?: any;
    after?: any;
    sort?: Array<SortBy>;
}
export interface SortBy {
    column: string;
    order: SortOrder;
}
export interface API {
    ping(headers?: object): Promise<PingReturn>;
    version(headers?: object): Promise<VersionReturn>;
    runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>;
    getSequenceContext(headers?: object): Promise<GetSequenceContextReturn>;
    getAuthToken(args: GetAuthTokenArgs, headers?: object): Promise<GetAuthTokenReturn>;
    sendPasswordlessLink(args: SendPasswordlessLinkArgs, headers?: object): Promise<SendPasswordlessLinkReturn>;
    friendList(args: FriendListArgs, headers?: object): Promise<FriendListReturn>;
    getFriendByAddress(args: GetFriendByAddressArgs, headers?: object): Promise<GetFriendByAddressReturn>;
    searchFriends(args: SearchFriendsArgs, headers?: object): Promise<SearchFriendsReturn>;
    addFriend(args: AddFriendArgs, headers?: object): Promise<AddFriendReturn>;
    updateFriendNickname(args: UpdateFriendNicknameArgs, headers?: object): Promise<UpdateFriendNicknameReturn>;
    removeFriend(args: RemoveFriendArgs, headers?: object): Promise<RemoveFriendReturn>;
    contractCall(args: ContractCallArgs, headers?: object): Promise<ContractCallReturn>;
    decodeContractCall(args: DecodeContractCallArgs, headers?: object): Promise<DecodeContractCallReturn>;
    lookupContractCallSelectors(args: LookupContractCallSelectorsArgs, headers?: object): Promise<LookupContractCallSelectorsReturn>;
    userStorageFetch(args: UserStorageFetchArgs, headers?: object): Promise<UserStorageFetchReturn>;
    userStorageSave(args: UserStorageSaveArgs, headers?: object): Promise<UserStorageSaveReturn>;
    userStorageDelete(args: UserStorageDeleteArgs, headers?: object): Promise<UserStorageDeleteReturn>;
    userStorageFetchAll(args: UserStorageFetchAllArgs, headers?: object): Promise<UserStorageFetchAllReturn>;
    getMoonpayLink(args: GetMoonpayLinkArgs, headers?: object): Promise<GetMoonpayLinkReturn>;
    getSardineClientToken(headers?: object): Promise<GetSardineClientTokenReturn>;
    isUsingGoogleMail(args: IsUsingGoogleMailArgs, headers?: object): Promise<IsUsingGoogleMailReturn>;
    resolveENSAddress(args: ResolveENSAddressArgs, headers?: object): Promise<ResolveENSAddressReturn>;
    isValidSignature(args: IsValidSignatureArgs, headers?: object): Promise<IsValidSignatureReturn>;
    isValidMessageSignature(args: IsValidMessageSignatureArgs, headers?: object): Promise<IsValidMessageSignatureReturn>;
    isValidTypedDataSignature(args: IsValidTypedDataSignatureArgs, headers?: object): Promise<IsValidTypedDataSignatureReturn>;
    isValidETHAuthProof(args: IsValidETHAuthProofArgs, headers?: object): Promise<IsValidETHAuthProofReturn>;
    getCoinPrices(args: GetCoinPricesArgs, headers?: object): Promise<GetCoinPricesReturn>;
    getCollectiblePrices(args: GetCollectiblePricesArgs, headers?: object): Promise<GetCollectiblePricesReturn>;
    getExchangeRate(args: GetExchangeRateArgs, headers?: object): Promise<GetExchangeRateReturn>;
    memoryStore(args: MemoryStoreArgs, headers?: object): Promise<MemoryStoreReturn>;
    memoryLoad(args: MemoryLoadArgs, headers?: object): Promise<MemoryLoadReturn>;
    listPayCardsOnFile(headers?: object): Promise<ListPayCardsOnFileReturn>;
    savePayCard(args: SavePayCardArgs, headers?: object): Promise<SavePayCardReturn>;
    updatePayCardCVC(args: UpdatePayCardCVCArgs, headers?: object): Promise<UpdatePayCardCVCReturn>;
    deletePayCard(args: DeletePayCardArgs, headers?: object): Promise<DeletePayCardReturn>;
    smartRampQuote(args: SmartRampQuoteArgs, headers?: object): Promise<SmartRampQuoteReturn>;
    smartRampPurchase(args: SmartRampPurchaseArgs, headers?: object): Promise<SmartRampPurchaseReturn>;
    smartRampWaitOrderConfirmation(args: SmartRampWaitOrderConfirmationArgs, headers?: object): Promise<SmartRampWaitOrderConfirmationReturn>;
    smartRampGetOrder(args: SmartRampGetOrderArgs, headers?: object): Promise<SmartRampGetOrderReturn>;
    smartRampCheckCardAuthorization(args: SmartRampCheckCardAuthorizationArgs, headers?: object): Promise<SmartRampCheckCardAuthorizationReturn>;
    smartRampOrdersList(args: SmartRampOrdersListArgs, headers?: object): Promise<SmartRampOrdersListReturn>;
    smartRampGetOrderTxnHash(args: SmartRampGetOrderTxnHashArgs, headers?: object): Promise<SmartRampGetOrderTxnHashReturn>;
    smartRampSubmitCardAuthorization(args: SmartRampSubmitCardAuthorizationArgs, headers?: object): Promise<SmartRampSubmitCardAuthorizationReturn>;
    adminSmartRampGetOrder(args: AdminSmartRampGetOrderArgs, headers?: object): Promise<AdminSmartRampGetOrderReturn>;
    adminSmartRampListCompletedOrders(args: AdminSmartRampListCompletedOrdersArgs, headers?: object): Promise<AdminSmartRampListCompletedOrdersReturn>;
    adminSmartRampListPendingOrders(args: AdminSmartRampListPendingOrdersArgs, headers?: object): Promise<AdminSmartRampListPendingOrdersReturn>;
    getInviteInfo(headers?: object): Promise<GetInviteInfoReturn>;
    isValidAccessCode(args: IsValidAccessCodeArgs, headers?: object): Promise<IsValidAccessCodeReturn>;
    internalClaimAccessCode(args: InternalClaimAccessCodeArgs, headers?: object): Promise<InternalClaimAccessCodeReturn>;
    walletRecover(args: WalletRecoverArgs, headers?: object): Promise<WalletRecoverReturn>;
    blockNumberAtTime(args: BlockNumberAtTimeArgs, headers?: object): Promise<BlockNumberAtTimeReturn>;
    paperSessionSecret(args: PaperSessionSecretArgs, headers?: object): Promise<PaperSessionSecretReturn>;
    paperSessionSecret2(args: PaperSessionSecret2Args, headers?: object): Promise<PaperSessionSecret2Return>;
}
export interface PingArgs {
}
export interface PingReturn {
    status: boolean;
}
export interface VersionArgs {
}
export interface VersionReturn {
    version: Version;
}
export interface RuntimeStatusArgs {
}
export interface RuntimeStatusReturn {
    status: RuntimeStatus;
}
export interface GetSequenceContextArgs {
}
export interface GetSequenceContextReturn {
    data: SequenceContext;
}
export interface GetAuthTokenArgs {
    ewtString: string;
    testnetMode?: boolean;
}
export interface GetAuthTokenReturn {
    status: boolean;
    jwtToken: string;
    address: string;
    user?: User;
}
export interface SendPasswordlessLinkArgs {
    email: string;
    redirectUri: string;
    intent: string;
}
export interface SendPasswordlessLinkReturn {
    status: boolean;
}
export interface FriendListArgs {
    page?: Page;
}
export interface FriendListReturn {
    page: Page;
    friends: Array<Friend>;
}
export interface GetFriendByAddressArgs {
    friendAddress: string;
}
export interface GetFriendByAddressReturn {
    status: boolean;
    friend: Friend;
}
export interface SearchFriendsArgs {
    filterUsername: string;
}
export interface SearchFriendsReturn {
    friends: Array<Friend>;
}
export interface AddFriendArgs {
    friendAddress: string;
    optionalNickname?: string;
}
export interface AddFriendReturn {
    status: boolean;
    friend?: Friend;
}
export interface UpdateFriendNicknameArgs {
    friendAddress: string;
    nickname: string;
}
export interface UpdateFriendNicknameReturn {
    status: boolean;
    friend?: Friend;
}
export interface RemoveFriendArgs {
    friendAddress: string;
}
export interface RemoveFriendReturn {
    status: boolean;
}
export interface ContractCallArgs {
    chainID: string;
    contract: string;
    inputExpr: string;
    outputExpr: string;
    args: Array<string>;
}
export interface ContractCallReturn {
    returns: Array<string>;
}
export interface DecodeContractCallArgs {
    callData: string;
}
export interface DecodeContractCallReturn {
    call: ContractCall;
}
export interface LookupContractCallSelectorsArgs {
    selectors: Array<string>;
}
export interface LookupContractCallSelectorsReturn {
    signatures: Array<Array<string>>;
}
export interface UserStorageFetchArgs {
    key: string;
}
export interface UserStorageFetchReturn {
    object: any;
}
export interface UserStorageSaveArgs {
    key: string;
    object: any;
}
export interface UserStorageSaveReturn {
    ok: boolean;
}
export interface UserStorageDeleteArgs {
    key: string;
}
export interface UserStorageDeleteReturn {
    ok: boolean;
}
export interface UserStorageFetchAllArgs {
    keys?: Array<string>;
}
export interface UserStorageFetchAllReturn {
    objects: {
        [key: string]: any;
    };
}
export interface GetMoonpayLinkArgs {
    url: string;
}
export interface GetMoonpayLinkReturn {
    signedUrl: string;
}
export interface GetSardineClientTokenArgs {
}
export interface GetSardineClientTokenReturn {
    token: string;
}
export interface IsUsingGoogleMailArgs {
    domain: string;
}
export interface IsUsingGoogleMailReturn {
    yes: boolean;
}
export interface ResolveENSAddressArgs {
    ens: string;
}
export interface ResolveENSAddressReturn {
    address: string;
    ok: boolean;
}
export interface IsValidSignatureArgs {
    chainId: string;
    walletAddress: string;
    digest: string;
    signature: string;
}
export interface IsValidSignatureReturn {
    isValid: boolean;
}
export interface IsValidMessageSignatureArgs {
    chainId: string;
    walletAddress: string;
    message: string;
    signature: string;
}
export interface IsValidMessageSignatureReturn {
    isValid: boolean;
}
export interface IsValidTypedDataSignatureArgs {
    chainId: string;
    walletAddress: string;
    typedData: any;
    signature: string;
}
export interface IsValidTypedDataSignatureReturn {
    isValid: boolean;
}
export interface IsValidETHAuthProofArgs {
    chainId: string;
    walletAddress: string;
    ethAuthProofString: string;
}
export interface IsValidETHAuthProofReturn {
    isValid: boolean;
}
export interface GetCoinPricesArgs {
    tokens: Array<Token>;
}
export interface GetCoinPricesReturn {
    tokenPrices: Array<TokenPrice>;
}
export interface GetCollectiblePricesArgs {
    tokens: Array<Token>;
}
export interface GetCollectiblePricesReturn {
    tokenPrices: Array<TokenPrice>;
}
export interface GetExchangeRateArgs {
    toCurrency: string;
}
export interface GetExchangeRateReturn {
    exchangeRate: ExchangeRate;
}
export interface MemoryStoreArgs {
    key: string;
    value: string;
}
export interface MemoryStoreReturn {
    ok: boolean;
}
export interface MemoryLoadArgs {
    key: string;
}
export interface MemoryLoadReturn {
    value: string;
}
export interface ListPayCardsOnFileArgs {
}
export interface ListPayCardsOnFileReturn {
    payCards: Array<PayCard>;
}
export interface SavePayCardArgs {
    payCard: PayCard;
}
export interface SavePayCardReturn {
    ok: boolean;
    payCard: PayCard;
}
export interface UpdatePayCardCVCArgs {
    payCardId: number;
    payCardCVC: string;
}
export interface UpdatePayCardCVCReturn {
    ok: boolean;
}
export interface DeletePayCardArgs {
    payCardId: number;
}
export interface DeletePayCardReturn {
    ok: boolean;
}
export interface SmartRampQuoteArgs {
    quoteRequest: SmartRampQuoteRequest;
}
export interface SmartRampQuoteReturn {
    status: boolean;
    quoteDetails: SmartRampQuoteDetails;
}
export interface SmartRampPurchaseArgs {
    quoteDetails: SmartRampQuoteDetails;
    payCardId: number;
    payCardCVC?: string;
}
export interface SmartRampPurchaseReturn {
    processing: boolean;
    receipt: SmartRampPurchaseReceipt;
}
export interface SmartRampWaitOrderConfirmationArgs {
    orderId: string;
}
export interface SmartRampWaitOrderConfirmationReturn {
    done: boolean;
    receipt: SmartRampPurchaseReceipt;
}
export interface SmartRampGetOrderArgs {
    orderId?: string;
    id?: number;
}
export interface SmartRampGetOrderReturn {
    order: SmartRampOrder;
}
export interface SmartRampCheckCardAuthorizationArgs {
    orderId: string;
}
export interface SmartRampCheckCardAuthorizationReturn {
    cardAuth: PayCardAuth;
}
export interface SmartRampOrdersListArgs {
    page?: Page;
    userAddressFilter?: string;
}
export interface SmartRampOrdersListReturn {
    page: Page;
    orders: Array<SmartRampOrder>;
}
export interface SmartRampGetOrderTxnHashArgs {
    orderId: string;
}
export interface SmartRampGetOrderTxnHashReturn {
    txnHash: string;
    txnSuccessful: SmartRampTxnStatus;
}
export interface SmartRampSubmitCardAuthorizationArgs {
    orderId: string;
    sms?: string;
    card2fa?: string;
}
export interface SmartRampSubmitCardAuthorizationReturn {
    status: boolean;
}
export interface AdminSmartRampGetOrderArgs {
    orderId?: string;
    id?: number;
}
export interface AdminSmartRampGetOrderReturn {
    order: SmartRampOrder;
}
export interface AdminSmartRampListCompletedOrdersArgs {
    accountAddress?: string;
}
export interface AdminSmartRampListCompletedOrdersReturn {
    orders: Array<SmartRampOrder>;
}
export interface AdminSmartRampListPendingOrdersArgs {
    accountAddress?: string;
}
export interface AdminSmartRampListPendingOrdersReturn {
    pendingOrders: Array<SmartRampOrder>;
}
export interface GetInviteInfoArgs {
}
export interface GetInviteInfoReturn {
    inviteInfo: InviteInfo;
}
export interface IsValidAccessCodeArgs {
    accessCode: string;
}
export interface IsValidAccessCodeReturn {
    status: boolean;
}
export interface InternalClaimAccessCodeArgs {
    address: string;
    accessCode: string;
}
export interface InternalClaimAccessCodeReturn {
    status: boolean;
}
export interface WalletRecoverArgs {
    username: string;
    secretHash: string;
}
export interface WalletRecoverReturn {
    encryptedWallet: string;
}
export interface BlockNumberAtTimeArgs {
    chainId: number;
    timestamps: Array<number>;
}
export interface BlockNumberAtTimeReturn {
    blocks: Array<number>;
}
export interface PaperSessionSecretArgs {
    chainName: string;
    contractAddress: string;
    paramsJson: string;
    contractType: string;
}
export interface PaperSessionSecretReturn {
    secret: string;
}
export interface PaperSessionSecret2Args {
    chainName: string;
    contractAddress: string;
    paramsJson: string;
    abi: string;
}
export interface PaperSessionSecret2Return {
    secret: string;
}
export declare class API implements API {
    protected hostname: string;
    protected fetch: Fetch;
    protected path: string;
    constructor(hostname: string, fetch: Fetch);
    private url;
    ping: (headers?: object | undefined) => Promise<PingReturn>;
    version: (headers?: object | undefined) => Promise<VersionReturn>;
    runtimeStatus: (headers?: object | undefined) => Promise<RuntimeStatusReturn>;
    getSequenceContext: (headers?: object | undefined) => Promise<GetSequenceContextReturn>;
    getAuthToken: (args: GetAuthTokenArgs, headers?: object | undefined) => Promise<GetAuthTokenReturn>;
    sendPasswordlessLink: (args: SendPasswordlessLinkArgs, headers?: object | undefined) => Promise<SendPasswordlessLinkReturn>;
    friendList: (args: FriendListArgs, headers?: object | undefined) => Promise<FriendListReturn>;
    getFriendByAddress: (args: GetFriendByAddressArgs, headers?: object | undefined) => Promise<GetFriendByAddressReturn>;
    searchFriends: (args: SearchFriendsArgs, headers?: object | undefined) => Promise<SearchFriendsReturn>;
    addFriend: (args: AddFriendArgs, headers?: object | undefined) => Promise<AddFriendReturn>;
    updateFriendNickname: (args: UpdateFriendNicknameArgs, headers?: object | undefined) => Promise<UpdateFriendNicknameReturn>;
    removeFriend: (args: RemoveFriendArgs, headers?: object | undefined) => Promise<RemoveFriendReturn>;
    contractCall: (args: ContractCallArgs, headers?: object | undefined) => Promise<ContractCallReturn>;
    decodeContractCall: (args: DecodeContractCallArgs, headers?: object | undefined) => Promise<DecodeContractCallReturn>;
    lookupContractCallSelectors: (args: LookupContractCallSelectorsArgs, headers?: object | undefined) => Promise<LookupContractCallSelectorsReturn>;
    userStorageFetch: (args: UserStorageFetchArgs, headers?: object | undefined) => Promise<UserStorageFetchReturn>;
    userStorageSave: (args: UserStorageSaveArgs, headers?: object | undefined) => Promise<UserStorageSaveReturn>;
    userStorageDelete: (args: UserStorageDeleteArgs, headers?: object | undefined) => Promise<UserStorageDeleteReturn>;
    userStorageFetchAll: (args: UserStorageFetchAllArgs, headers?: object | undefined) => Promise<UserStorageFetchAllReturn>;
    getMoonpayLink: (args: GetMoonpayLinkArgs, headers?: object | undefined) => Promise<GetMoonpayLinkReturn>;
    getSardineClientToken: (headers?: object | undefined) => Promise<GetSardineClientTokenReturn>;
    isUsingGoogleMail: (args: IsUsingGoogleMailArgs, headers?: object | undefined) => Promise<IsUsingGoogleMailReturn>;
    resolveENSAddress: (args: ResolveENSAddressArgs, headers?: object | undefined) => Promise<ResolveENSAddressReturn>;
    isValidSignature: (args: IsValidSignatureArgs, headers?: object | undefined) => Promise<IsValidSignatureReturn>;
    isValidMessageSignature: (args: IsValidMessageSignatureArgs, headers?: object | undefined) => Promise<IsValidMessageSignatureReturn>;
    isValidTypedDataSignature: (args: IsValidTypedDataSignatureArgs, headers?: object | undefined) => Promise<IsValidTypedDataSignatureReturn>;
    isValidETHAuthProof: (args: IsValidETHAuthProofArgs, headers?: object | undefined) => Promise<IsValidETHAuthProofReturn>;
    getCoinPrices: (args: GetCoinPricesArgs, headers?: object | undefined) => Promise<GetCoinPricesReturn>;
    getCollectiblePrices: (args: GetCollectiblePricesArgs, headers?: object | undefined) => Promise<GetCollectiblePricesReturn>;
    getExchangeRate: (args: GetExchangeRateArgs, headers?: object | undefined) => Promise<GetExchangeRateReturn>;
    memoryStore: (args: MemoryStoreArgs, headers?: object | undefined) => Promise<MemoryStoreReturn>;
    memoryLoad: (args: MemoryLoadArgs, headers?: object | undefined) => Promise<MemoryLoadReturn>;
    listPayCardsOnFile: (headers?: object | undefined) => Promise<ListPayCardsOnFileReturn>;
    savePayCard: (args: SavePayCardArgs, headers?: object | undefined) => Promise<SavePayCardReturn>;
    updatePayCardCVC: (args: UpdatePayCardCVCArgs, headers?: object | undefined) => Promise<UpdatePayCardCVCReturn>;
    deletePayCard: (args: DeletePayCardArgs, headers?: object | undefined) => Promise<DeletePayCardReturn>;
    smartRampQuote: (args: SmartRampQuoteArgs, headers?: object | undefined) => Promise<SmartRampQuoteReturn>;
    smartRampPurchase: (args: SmartRampPurchaseArgs, headers?: object | undefined) => Promise<SmartRampPurchaseReturn>;
    smartRampWaitOrderConfirmation: (args: SmartRampWaitOrderConfirmationArgs, headers?: object | undefined) => Promise<SmartRampWaitOrderConfirmationReturn>;
    smartRampGetOrder: (args: SmartRampGetOrderArgs, headers?: object | undefined) => Promise<SmartRampGetOrderReturn>;
    smartRampCheckCardAuthorization: (args: SmartRampCheckCardAuthorizationArgs, headers?: object | undefined) => Promise<SmartRampCheckCardAuthorizationReturn>;
    smartRampOrdersList: (args: SmartRampOrdersListArgs, headers?: object | undefined) => Promise<SmartRampOrdersListReturn>;
    smartRampGetOrderTxnHash: (args: SmartRampGetOrderTxnHashArgs, headers?: object | undefined) => Promise<SmartRampGetOrderTxnHashReturn>;
    smartRampSubmitCardAuthorization: (args: SmartRampSubmitCardAuthorizationArgs, headers?: object | undefined) => Promise<SmartRampSubmitCardAuthorizationReturn>;
    adminSmartRampGetOrder: (args: AdminSmartRampGetOrderArgs, headers?: object | undefined) => Promise<AdminSmartRampGetOrderReturn>;
    adminSmartRampListCompletedOrders: (args: AdminSmartRampListCompletedOrdersArgs, headers?: object | undefined) => Promise<AdminSmartRampListCompletedOrdersReturn>;
    adminSmartRampListPendingOrders: (args: AdminSmartRampListPendingOrdersArgs, headers?: object | undefined) => Promise<AdminSmartRampListPendingOrdersReturn>;
    getInviteInfo: (headers?: object | undefined) => Promise<GetInviteInfoReturn>;
    isValidAccessCode: (args: IsValidAccessCodeArgs, headers?: object | undefined) => Promise<IsValidAccessCodeReturn>;
    internalClaimAccessCode: (args: InternalClaimAccessCodeArgs, headers?: object | undefined) => Promise<InternalClaimAccessCodeReturn>;
    walletRecover: (args: WalletRecoverArgs, headers?: object | undefined) => Promise<WalletRecoverReturn>;
    blockNumberAtTime: (args: BlockNumberAtTimeArgs, headers?: object | undefined) => Promise<BlockNumberAtTimeReturn>;
    paperSessionSecret: (args: PaperSessionSecretArgs, headers?: object | undefined) => Promise<PaperSessionSecretReturn>;
    paperSessionSecret2: (args: PaperSessionSecret2Args, headers?: object | undefined) => Promise<PaperSessionSecret2Return>;
}
export interface WebRPCError extends Error {
    code: string;
    msg: string;
    status: number;
}
export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
