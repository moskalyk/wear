export declare const WebRPCVersion = "v1";
export declare const WebRPCSchemaVersion = "v0.4.0";
export declare const WebRPCSchemaHash = "98e0726794b2b5922a0e356280daac3a409602e4";
export interface Version {
    webrpcVersion: string;
    schemaVersion: string;
    schemaHash: string;
    appVersion: string;
}
export interface RuntimeStatus {
    healthOK: boolean;
    startTime: string;
    uptime: number;
    ver: string;
    branch: string;
    commitHash: string;
}
export interface SequenceContext {
    factory: string;
    mainModule: string;
    mainModuleUpgradable: string;
    guestModule: string;
    utils: string;
}
export interface WalletConfig {
    address: string;
    signers: Array<WalletSigner>;
    threshold: number;
}
export interface WalletSigner {
    address: string;
    weight: number;
}
export interface SignRequest {
    chainId: number;
    msg: string;
    auxData: string;
}
export interface Guard {
    ping(headers?: object): Promise<PingReturn>;
    version(headers?: object): Promise<VersionReturn>;
    runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>;
    getSequenceContext(headers?: object): Promise<GetSequenceContextReturn>;
    getSignerConfig(headers?: object): Promise<GetSignerConfigReturn>;
    sign(args: SignArgs, headers?: object): Promise<SignReturn>;
}
export interface PingArgs {
}
export interface PingReturn {
    status: boolean;
}
export interface VersionArgs {
}
export interface VersionReturn {
    version: Version;
}
export interface RuntimeStatusArgs {
}
export interface RuntimeStatusReturn {
    status: RuntimeStatus;
}
export interface GetSequenceContextArgs {
}
export interface GetSequenceContextReturn {
    data: SequenceContext;
}
export interface GetSignerConfigArgs {
}
export interface GetSignerConfigReturn {
    signerConfig: WalletConfig;
}
export interface SignArgs {
    request: SignRequest;
}
export interface SignReturn {
    sig: string;
}
export declare class Guard implements Guard {
    protected hostname: string;
    protected fetch: Fetch;
    protected path: string;
    constructor(hostname: string, fetch: Fetch);
    private url;
    ping: (headers?: object | undefined) => Promise<PingReturn>;
    version: (headers?: object | undefined) => Promise<VersionReturn>;
    runtimeStatus: (headers?: object | undefined) => Promise<RuntimeStatusReturn>;
    getSequenceContext: (headers?: object | undefined) => Promise<GetSequenceContextReturn>;
    getSignerConfig: (headers?: object | undefined) => Promise<GetSignerConfigReturn>;
    sign: (args: SignArgs, headers?: object | undefined) => Promise<SignReturn>;
}
export interface WebRPCError extends Error {
    code: string;
    msg: string;
    status: number;
}
export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
