'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

/* eslint-disable */
// sequence-guard v0.4.0 98e0726794b2b5922a0e356280daac3a409602e4
// --
// Code generated by webrpc-gen@v0.10.x-dev with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=guard.ridl -target=typescript -client -out=./clients/guard.gen.ts

// WebRPC description and code-gen version
const WebRPCVersion = "v1";

// Schema version of your RIDL schema
const WebRPCSchemaVersion = "v0.4.0";

// Schema hash generated from your RIDL schema
const WebRPCSchemaHash = "98e0726794b2b5922a0e356280daac3a409602e4";

//
// Types
//

//
// Client
//
class Guard {
  constructor(hostname, fetch) {
    this.hostname = void 0;
    this.fetch = void 0;
    this.path = '/rpc/Guard/';
    this.ping = headers => {
      return this.fetch(this.url('Ping'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.version = headers => {
      return this.fetch(this.url('Version'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            version: _data.version
          };
        });
      });
    };
    this.runtimeStatus = headers => {
      return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };
    this.getSequenceContext = headers => {
      return this.fetch(this.url('GetSequenceContext'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            data: _data.data
          };
        });
      });
    };
    this.getSignerConfig = headers => {
      return this.fetch(this.url('GetSignerConfig'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            signerConfig: _data.signerConfig
          };
        });
      });
    };
    this.sign = (args, headers) => {
      return this.fetch(this.url('Sign'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            sig: _data.sig
          };
        });
      });
    };
    this.hostname = hostname;
    this.fetch = (input, init) => fetch(input, init);
  }
  url(name) {
    return this.hostname + this.path + name;
  }
}
const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: _extends({}, headers, {
      'Content-Type': 'application/json'
    }),
    body: JSON.stringify(body || {})
  };
};
const buildResponse = res => {
  return res.text().then(text => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (err) {
      throw {
        code: 'unknown',
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      };
    }
    if (!res.ok) {
      throw data; // webrpc error response
    }

    return data;
  });
};

exports.Guard = Guard;
exports.WebRPCSchemaHash = WebRPCSchemaHash;
exports.WebRPCSchemaVersion = WebRPCSchemaVersion;
exports.WebRPCVersion = WebRPCVersion;
